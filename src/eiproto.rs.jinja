{# ei-scanner jinja template, for `` #}

// GENERATED FILE

// Define module for each interface?
// TODO Cleaner/safer way to strip out Ei/Eis prefix?

{# TODO handle destructor #}

{% macro strip_prefix(name) -%}
    {{ name.removeprefix('eis_').removeprefix('ei_') }}
{%- endmacro %}

{% macro interface_type(interface) -%}
    super::{{strip_prefix(interface.name)}}::{{strip_prefix(interface.name)|camel}}
{%- endmacro %}

{% macro arg_type(arg, owned) -%}
    {% if arg.enum != None %} {{ arg.enum.name|camel }}
    {% elif arg.protocol_type == 'string' and owned %} String
    {% elif arg.protocol_type == 'string' %} &str
    {% elif arg.protocol_type == 'int32' %} i32
    {% elif arg.protocol_type == 'uint32' %} u32
    {% elif arg.protocol_type == 'int64' %} i64
    {% elif arg.protocol_type == 'uint64' %} u64
    {% elif arg.protocol_type == 'object' and owned %} {{interface_type(arg.interface)}}
    {% elif arg.protocol_type == 'object' %} &{{interface_type(arg.interface)}}
    {% elif arg.protocol_type == 'new_id' and arg.interface %} {{interface_type(arg.interface)}} {# TODO #}
    {% elif arg.protocol_type == 'new_id' %} u64 {# TODO interface arg? #}
    {% elif arg.protocol_type == 'float' %} f32
    {% elif arg.protocol_type == 'fd' and owned %} std::os::unix::io::OwnedFd
    {% elif arg.protocol_type == 'fd' %} std::os::unix::io::BorrowedFd
    {% else %} unhandled_arg_type_{{arg.protocol_type}}
    {% endif %}
{%- endmacro %}

{% macro return_type(arguments) -%}
{%- endmacro %}

{% macro incoming_enum(interface) -%}
    {% if interface.name.startswith('eis_') %}
    Request
    {% else %}
    Event
    {% endif %}
{%- endmacro %}

{% for interface in interfaces %}
/** {{interface.description.text|ei_escape_names}} */
pub mod {{strip_prefix(interface.name)}} {
    #[derive(Clone, Debug)]
    pub struct {{strip_prefix(interface.name)|camel}} {
        pub(crate) connection: crate::Connection,
        pub(crate) id: u64,
    }

    impl {{strip_prefix(interface.name)|camel}} {
        {% for outgoing in interface.outgoing %}
        /** {{outgoing.description.text|ei_escape_names}} */
        pub fn {{outgoing.name}}(
            &self,
            {%- for arg in outgoing.arguments %}
            {% if arg.protocol_type != 'new_id' %}
            {{arg.name}}: {{arg_type(arg, false)}},
            {% endif %}
            {% endfor -%}
            ) -> rustix::io::Result<(
            {%- for arg in outgoing.arguments %}
            {% if arg.protocol_type == 'new_id' %}
            {{arg_type(arg, true)}}
            {% endif %}
            {% endfor -%}
            )>{
            {%- for arg in outgoing.arguments %}
            {% if arg.protocol_type == 'new_id' %}
            let {{arg.name}} = self.connection.new_id();
            {% endif -%}
            {% endfor -%}

            let args = &[
            {%- for arg in outgoing.arguments %}
                crate::Arg::{{arg.protocol_type|camel}}({{arg.name}}.into()),
            {% endfor -%}
            ];

            self.connection.request(self.id, {{outgoing.opcode}}, args)?;
	    
	    Ok((
            {%- for arg in outgoing.arguments %}
            {% if arg.protocol_type == 'new_id' %}
            {% if arg.interface %}
            {{arg_type(arg, true)}} {
                connection: self.connection.clone(),
                id: {{arg.name}}
            }
            {% else -%}
            {{arg.name}} {# TODO how to handle type that's not statically known? #}
            {% endif -%}
            {% endif -%}
            {% endfor -%}
	    ))
        }

        {% endfor %}
    }

    {% for enum in interface.enums %}
     /** {{enum.description.text|ei_escape_names}} */
    #[derive(Clone, Copy, Debug)]
    pub enum {{enum.camel_name}} {
        {% for entry in enum.entries %}
        /** {{entry.summary}} */
        {{entry.name|camel}} = {{entry.value}},
        {% endfor %}
    }

    impl From<{{enum.camel_name}}> for u32 {
        fn from(value: {{enum.camel_name}}) -> u32 {
            value as u32
        }
    }
    {% endfor %}

    #[non_exhaustive]
    #[derive(Debug)]
    pub enum {{incoming_enum(interface)}} {
        {% for incoming in interface.incoming %}
            /** {{incoming.description.text|ei_escape_names}} */
            {{ incoming.name|camel }}
                {% if incoming.arguments %}
                { {% for arg in incoming.arguments %}
                    /** {{arg.summary}} */
                    {{arg.name}}: {{arg_type(arg, true)}},
                {% endfor %} }
                {% endif %},
        {% endfor %}
    }
}

{% endfor %}

// map opcodes

#[non_exhaustive]
#[derive(Debug)]
pub enum {{incoming_enum(interfaces[0])}} {
    {% for interface in interfaces %}
        {{interface.name|camel}}({{strip_prefix(interface.name)}}::{{incoming_enum(interface)}}),
    {% endfor %}
}
